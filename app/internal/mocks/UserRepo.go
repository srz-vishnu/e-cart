// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	dto "e-cart/app/dto"
	internal "e-cart/app/internal"

	mock "github.com/stretchr/testify/mock"
)

// UserRepo is an autogenerated mock type for the UserRepo type
type UserRepo struct {
	mock.Mock
}

// AddOrUpdateCart provides a mock function with given fields: userID, product, quantity, totalAmount
func (_m *UserRepo) AddOrUpdateCart(userID int64, product *internal.Brand, quantity int64, totalAmount float64) error {
	ret := _m.Called(userID, product, quantity, totalAmount)

	if len(ret) == 0 {
		panic("no return value specified for AddOrUpdateCart")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, *internal.Brand, int64, float64) error); ok {
		r0 = rf(userID, product, quantity, totalAmount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddOrUpdateFavorite provides a mock function with given fields: userID, args
func (_m *UserRepo) AddOrUpdateFavorite(userID int64, args dto.UserFavoriteBrandRequest) error {
	ret := _m.Called(userID, args)

	if len(ret) == 0 {
		panic("no return value specified for AddOrUpdateFavorite")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, dto.UserFavoriteBrandRequest) error); ok {
		r0 = rf(userID, args)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckProductInCart provides a mock function with given fields: userID, productID
func (_m *UserRepo) CheckProductInCart(userID int64, productID int64) (*internal.Cart, error) {
	ret := _m.Called(userID, productID)

	if len(ret) == 0 {
		panic("no return value specified for CheckProductInCart")
	}

	var r0 *internal.Cart
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int64) (*internal.Cart, error)); ok {
		return rf(userID, productID)
	}
	if rf, ok := ret.Get(0).(func(int64, int64) *internal.Cart); ok {
		r0 = rf(userID, productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internal.Cart)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(userID, productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClearCart provides a mock function with given fields: userID
func (_m *UserRepo) ClearCart(userID int64) error {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for ClearCart")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateOrder provides a mock function with given fields: userID, totalAmount, cartItems
func (_m *UserRepo) CreateOrder(userID int64, totalAmount float64, cartItems []internal.Cart) (*internal.Order, []internal.OrderItem, error) {
	ret := _m.Called(userID, totalAmount, cartItems)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 *internal.Order
	var r1 []internal.OrderItem
	var r2 error
	if rf, ok := ret.Get(0).(func(int64, float64, []internal.Cart) (*internal.Order, []internal.OrderItem, error)); ok {
		return rf(userID, totalAmount, cartItems)
	}
	if rf, ok := ret.Get(0).(func(int64, float64, []internal.Cart) *internal.Order); ok {
		r0 = rf(userID, totalAmount, cartItems)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internal.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, float64, []internal.Cart) []internal.OrderItem); ok {
		r1 = rf(userID, totalAmount, cartItems)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]internal.OrderItem)
		}
	}

	if rf, ok := ret.Get(2).(func(int64, float64, []internal.Cart) error); ok {
		r2 = rf(userID, totalAmount, cartItems)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FetchCartItems provides a mock function with given fields: userID, cartID
func (_m *UserRepo) FetchCartItems(userID int64, cartID int64) ([]internal.Cart, error) {
	ret := _m.Called(userID, cartID)

	if len(ret) == 0 {
		panic("no return value specified for FetchCartItems")
	}

	var r0 []internal.Cart
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int64) ([]internal.Cart, error)); ok {
		return rf(userID, cartID)
	}
	if rf, ok := ret.Get(0).(func(int64, int64) []internal.Cart); ok {
		r0 = rf(userID, cartID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]internal.Cart)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(userID, cartID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBrandsByIDs provides a mock function with given fields: brandIDs
func (_m *UserRepo) GetBrandsByIDs(brandIDs []int64) ([]internal.Brand, error) {
	ret := _m.Called(brandIDs)

	if len(ret) == 0 {
		panic("no return value specified for GetBrandsByIDs")
	}

	var r0 []internal.Brand
	var r1 error
	if rf, ok := ret.Get(0).(func([]int64) ([]internal.Brand, error)); ok {
		return rf(brandIDs)
	}
	if rf, ok := ret.Get(0).(func([]int64) []internal.Brand); ok {
		r0 = rf(brandIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]internal.Brand)
		}
	}

	if rf, ok := ret.Get(1).(func([]int64) error); ok {
		r1 = rf(brandIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCartWithProductDetails provides a mock function with given fields: userID, productID
func (_m *UserRepo) GetCartWithProductDetails(userID int64, productID int64) (*internal.Cart, error) {
	ret := _m.Called(userID, productID)

	if len(ret) == 0 {
		panic("no return value specified for GetCartWithProductDetails")
	}

	var r0 *internal.Cart
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int64) (*internal.Cart, error)); ok {
		return rf(userID, productID)
	}
	if rf, ok := ret.Get(0).(func(int64, int64) *internal.Cart); ok {
		r0 = rf(userID, productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internal.Cart)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(userID, productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFavoriteBrandIDs provides a mock function with given fields: userID
func (_m *UserRepo) GetFavoriteBrandIDs(userID int64) ([]int64, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetFavoriteBrandIDs")
	}

	var r0 []int64
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) ([]int64, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int64) []int64); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int64)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderHistoryByUserID provides a mock function with given fields: userID
func (_m *UserRepo) GetOrderHistoryByUserID(userID int64) ([]internal.Order, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderHistoryByUserID")
	}

	var r0 []internal.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) ([]internal.Order, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int64) []internal.Order); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]internal.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductDetails provides a mock function with given fields: productID, categoryID
func (_m *UserRepo) GetProductDetails(productID int64, categoryID int64) (*internal.Brand, error) {
	ret := _m.Called(productID, categoryID)

	if len(ret) == 0 {
		panic("no return value specified for GetProductDetails")
	}

	var r0 *internal.Brand
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int64) (*internal.Brand, error)); ok {
		return rf(productID, categoryID)
	}
	if rf, ok := ret.Get(0).(func(int64, int64) *internal.Brand); ok {
		r0 = rf(productID, categoryID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internal.Brand)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(productID, categoryID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByID provides a mock function with given fields: userID
func (_m *UserRepo) GetUserByID(userID int64) (*internal.Userdetail, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 *internal.Userdetail
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*internal.Userdetail, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int64) *internal.Userdetail); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internal.Userdetail)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByUsername provides a mock function with given fields: username
func (_m *UserRepo) GetUserByUsername(username string) (*internal.Userdetail, error) {
	ret := _m.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByUsername")
	}

	var r0 *internal.Userdetail
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*internal.Userdetail, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) *internal.Userdetail); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internal.Userdetail)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsUserActive provides a mock function with given fields: userID
func (_m *UserRepo) IsUserActive(userID int64) (bool, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for IsUserActive")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (bool, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int64) bool); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveUserDetails provides a mock function with given fields: args
func (_m *UserRepo) SaveUserDetails(args *dto.UserDetailSaveRequest) (int64, error) {
	ret := _m.Called(args)

	if len(ret) == 0 {
		panic("no return value specified for SaveUserDetails")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*dto.UserDetailSaveRequest) (int64, error)); ok {
		return rf(args)
	}
	if rf, ok := ret.Get(0).(func(*dto.UserDetailSaveRequest) int64); ok {
		r0 = rf(args)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*dto.UserDetailSaveRequest) error); ok {
		r1 = rf(args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCartOrderStatus provides a mock function with given fields: userID, orderID, cartID
func (_m *UserRepo) UpdateCartOrderStatus(userID int64, orderID int64, cartID int64) error {
	ret := _m.Called(userID, orderID, cartID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCartOrderStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int64, int64) error); ok {
		r0 = rf(userID, orderID, cartID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateStockCount provides a mock function with given fields: orderItems
func (_m *UserRepo) UpdateStockCount(orderItems []internal.OrderItem) ([]internal.Brand, error) {
	ret := _m.Called(orderItems)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStockCount")
	}

	var r0 []internal.Brand
	var r1 error
	if rf, ok := ret.Get(0).(func([]internal.OrderItem) ([]internal.Brand, error)); ok {
		return rf(orderItems)
	}
	if rf, ok := ret.Get(0).(func([]internal.OrderItem) []internal.Brand); ok {
		r0 = rf(orderItems)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]internal.Brand)
		}
	}

	if rf, ok := ret.Get(1).(func([]internal.OrderItem) error); ok {
		r1 = rf(orderItems)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserDetails provides a mock function with given fields: args, UserId
func (_m *UserRepo) UpdateUserDetails(args *dto.UpdateUserDetailRequest, UserId int64) error {
	ret := _m.Called(args, UserId)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserDetails")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*dto.UpdateUserDetailRequest, int64) error); ok {
		r0 = rf(args, UserId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ViewCart provides a mock function with given fields: userID
func (_m *UserRepo) ViewCart(userID int64) ([]internal.Cart, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for ViewCart")
	}

	var r0 []internal.Cart
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) ([]internal.Cart, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int64) []internal.Cart); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]internal.Cart)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserRepo creates a new instance of UserRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepo {
	mock := &UserRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
